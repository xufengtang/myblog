// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLoginusers(t *testing.T) {
	t.Parallel()

	query := Loginusers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLoginusersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Loginuser{}
	if err = randomize.Struct(seed, o, loginuserDBTypes, true, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Loginusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLoginusersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Loginuser{}
	if err = randomize.Struct(seed, o, loginuserDBTypes, true, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Loginusers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Loginusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLoginusersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Loginuser{}
	if err = randomize.Struct(seed, o, loginuserDBTypes, true, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LoginuserSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Loginusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLoginusersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Loginuser{}
	if err = randomize.Struct(seed, o, loginuserDBTypes, true, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LoginuserExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Loginuser exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LoginuserExists to return true, but got false.")
	}
}

func testLoginusersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Loginuser{}
	if err = randomize.Struct(seed, o, loginuserDBTypes, true, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	loginuserFound, err := FindLoginuser(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if loginuserFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLoginusersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Loginuser{}
	if err = randomize.Struct(seed, o, loginuserDBTypes, true, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Loginusers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLoginusersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Loginuser{}
	if err = randomize.Struct(seed, o, loginuserDBTypes, true, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Loginusers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLoginusersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	loginuserOne := &Loginuser{}
	loginuserTwo := &Loginuser{}
	if err = randomize.Struct(seed, loginuserOne, loginuserDBTypes, false, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}
	if err = randomize.Struct(seed, loginuserTwo, loginuserDBTypes, false, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = loginuserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = loginuserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Loginusers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLoginusersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	loginuserOne := &Loginuser{}
	loginuserTwo := &Loginuser{}
	if err = randomize.Struct(seed, loginuserOne, loginuserDBTypes, false, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}
	if err = randomize.Struct(seed, loginuserTwo, loginuserDBTypes, false, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = loginuserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = loginuserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Loginusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func loginuserBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Loginuser) error {
	*o = Loginuser{}
	return nil
}

func loginuserAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Loginuser) error {
	*o = Loginuser{}
	return nil
}

func loginuserAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Loginuser) error {
	*o = Loginuser{}
	return nil
}

func loginuserBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Loginuser) error {
	*o = Loginuser{}
	return nil
}

func loginuserAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Loginuser) error {
	*o = Loginuser{}
	return nil
}

func loginuserBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Loginuser) error {
	*o = Loginuser{}
	return nil
}

func loginuserAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Loginuser) error {
	*o = Loginuser{}
	return nil
}

func loginuserBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Loginuser) error {
	*o = Loginuser{}
	return nil
}

func loginuserAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Loginuser) error {
	*o = Loginuser{}
	return nil
}

func testLoginusersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Loginuser{}
	o := &Loginuser{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, loginuserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Loginuser object: %s", err)
	}

	AddLoginuserHook(boil.BeforeInsertHook, loginuserBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	loginuserBeforeInsertHooks = []LoginuserHook{}

	AddLoginuserHook(boil.AfterInsertHook, loginuserAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	loginuserAfterInsertHooks = []LoginuserHook{}

	AddLoginuserHook(boil.AfterSelectHook, loginuserAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	loginuserAfterSelectHooks = []LoginuserHook{}

	AddLoginuserHook(boil.BeforeUpdateHook, loginuserBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	loginuserBeforeUpdateHooks = []LoginuserHook{}

	AddLoginuserHook(boil.AfterUpdateHook, loginuserAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	loginuserAfterUpdateHooks = []LoginuserHook{}

	AddLoginuserHook(boil.BeforeDeleteHook, loginuserBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	loginuserBeforeDeleteHooks = []LoginuserHook{}

	AddLoginuserHook(boil.AfterDeleteHook, loginuserAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	loginuserAfterDeleteHooks = []LoginuserHook{}

	AddLoginuserHook(boil.BeforeUpsertHook, loginuserBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	loginuserBeforeUpsertHooks = []LoginuserHook{}

	AddLoginuserHook(boil.AfterUpsertHook, loginuserAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	loginuserAfterUpsertHooks = []LoginuserHook{}
}

func testLoginusersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Loginuser{}
	if err = randomize.Struct(seed, o, loginuserDBTypes, true, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Loginusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLoginusersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Loginuser{}
	if err = randomize.Struct(seed, o, loginuserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(loginuserColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Loginusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLoginusersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Loginuser{}
	if err = randomize.Struct(seed, o, loginuserDBTypes, true, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLoginusersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Loginuser{}
	if err = randomize.Struct(seed, o, loginuserDBTypes, true, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LoginuserSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLoginusersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Loginuser{}
	if err = randomize.Struct(seed, o, loginuserDBTypes, true, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Loginusers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	loginuserDBTypes = map[string]string{`ID`: `int`, `UserName`: `varchar`, `UserPwd`: `varchar`, `CreateTime`: `datetime`, `CreateUser`: `varchar`, `UpdateTime`: `datetime`, `UpdateUser`: `varchar`}
	_                = bytes.MinRead
)

func testLoginusersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(loginuserPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(loginuserAllColumns) == len(loginuserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Loginuser{}
	if err = randomize.Struct(seed, o, loginuserDBTypes, true, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Loginusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, loginuserDBTypes, true, loginuserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLoginusersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(loginuserAllColumns) == len(loginuserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Loginuser{}
	if err = randomize.Struct(seed, o, loginuserDBTypes, true, loginuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Loginusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, loginuserDBTypes, true, loginuserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(loginuserAllColumns, loginuserPrimaryKeyColumns) {
		fields = loginuserAllColumns
	} else {
		fields = strmangle.SetComplement(
			loginuserAllColumns,
			loginuserPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LoginuserSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLoginusersUpsert(t *testing.T) {
	t.Parallel()

	if len(loginuserAllColumns) == len(loginuserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLLoginuserUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Loginuser{}
	if err = randomize.Struct(seed, &o, loginuserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Loginuser: %s", err)
	}

	count, err := Loginusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, loginuserDBTypes, false, loginuserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Loginuser struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Loginuser: %s", err)
	}

	count, err = Loginusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
