// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Loginusers", testLoginusers)
	t.Run("Mainblogs", testMainblogs)
	t.Run("Smallblogs", testSmallblogs)
}

func TestDelete(t *testing.T) {
	t.Run("Loginusers", testLoginusersDelete)
	t.Run("Mainblogs", testMainblogsDelete)
	t.Run("Smallblogs", testSmallblogsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Loginusers", testLoginusersQueryDeleteAll)
	t.Run("Mainblogs", testMainblogsQueryDeleteAll)
	t.Run("Smallblogs", testSmallblogsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Loginusers", testLoginusersSliceDeleteAll)
	t.Run("Mainblogs", testMainblogsSliceDeleteAll)
	t.Run("Smallblogs", testSmallblogsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Loginusers", testLoginusersExists)
	t.Run("Mainblogs", testMainblogsExists)
	t.Run("Smallblogs", testSmallblogsExists)
}

func TestFind(t *testing.T) {
	t.Run("Loginusers", testLoginusersFind)
	t.Run("Mainblogs", testMainblogsFind)
	t.Run("Smallblogs", testSmallblogsFind)
}

func TestBind(t *testing.T) {
	t.Run("Loginusers", testLoginusersBind)
	t.Run("Mainblogs", testMainblogsBind)
	t.Run("Smallblogs", testSmallblogsBind)
}

func TestOne(t *testing.T) {
	t.Run("Loginusers", testLoginusersOne)
	t.Run("Mainblogs", testMainblogsOne)
	t.Run("Smallblogs", testSmallblogsOne)
}

func TestAll(t *testing.T) {
	t.Run("Loginusers", testLoginusersAll)
	t.Run("Mainblogs", testMainblogsAll)
	t.Run("Smallblogs", testSmallblogsAll)
}

func TestCount(t *testing.T) {
	t.Run("Loginusers", testLoginusersCount)
	t.Run("Mainblogs", testMainblogsCount)
	t.Run("Smallblogs", testSmallblogsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Loginusers", testLoginusersHooks)
	t.Run("Mainblogs", testMainblogsHooks)
	t.Run("Smallblogs", testSmallblogsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Loginusers", testLoginusersInsert)
	t.Run("Loginusers", testLoginusersInsertWhitelist)
	t.Run("Mainblogs", testMainblogsInsert)
	t.Run("Mainblogs", testMainblogsInsertWhitelist)
	t.Run("Smallblogs", testSmallblogsInsert)
	t.Run("Smallblogs", testSmallblogsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Loginusers", testLoginusersReload)
	t.Run("Mainblogs", testMainblogsReload)
	t.Run("Smallblogs", testSmallblogsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Loginusers", testLoginusersReloadAll)
	t.Run("Mainblogs", testMainblogsReloadAll)
	t.Run("Smallblogs", testSmallblogsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Loginusers", testLoginusersSelect)
	t.Run("Mainblogs", testMainblogsSelect)
	t.Run("Smallblogs", testSmallblogsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Loginusers", testLoginusersUpdate)
	t.Run("Mainblogs", testMainblogsUpdate)
	t.Run("Smallblogs", testSmallblogsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Loginusers", testLoginusersSliceUpdateAll)
	t.Run("Mainblogs", testMainblogsSliceUpdateAll)
	t.Run("Smallblogs", testSmallblogsSliceUpdateAll)
}
